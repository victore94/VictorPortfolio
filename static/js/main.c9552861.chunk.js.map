{"version":3,"sources":["components/Images/IMG_0086.PNG","components/Navbar.js","components/Home.js","components/About.js","components/Contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","class","to","src","logo","width","height","Home","e","className","About","Contact","props","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,sC,2KC+B5BC,EA1BA,WACX,OACI,yBAAKC,MAAM,iCAEP,wBAAIA,MAAM,OAEN,kBAAC,IAAD,CAAMA,MAAM,qBAAqBC,GAAG,KAChC,yBAAKD,MAAM,wBAAwBE,IAAKC,IAAMC,MAAM,KAAKC,OAAO,QAEpE,wBAAIL,MAAM,YACN,kBAAC,IAAD,CAAMC,GAAG,IAAID,MAAM,mBAAnB,SAEJ,wBAAIA,MAAM,YACN,kBAAC,IAAD,CAAMC,GAAG,SAASD,MAAM,YAAxB,UAEJ,wBAAIA,MAAM,YACN,kBAAC,IAAD,CAAMC,GAAG,WAAWD,MAAM,YAA1B,eCTLM,EATF,SAACC,GACV,OACI,yBAAKC,UAAU,aACX,wBAAIA,UAAU,UAAd,QACA,sDCIGC,EARD,WACV,OACI,yBAAKD,UAAU,aACX,wBAAIA,UAAU,UAAd,SACA,kDCOGE,EAXC,SAACC,GAIb,OACI,yBAAKH,UAAU,aACX,wBAAIA,UAAU,UAAd,WACA,gD,OCoBGI,MArBf,WAEE,OACE,kBAAC,IAAD,KACE,yBAAKJ,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKR,MAAM,aACT,yBAAKA,MAAM,QAGX,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjC,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,SAASC,UAAWN,IACtC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,WAAWC,UAAWL,QCT9BM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c9552861.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/IMG_0086.3442021c.PNG\";","import React from 'react';\nimport { Link, Navlink } from 'react-router-dom'\nimport '../App.css'\nimport logo from './Images/IMG_0086.PNG'\n\nconst Navbar = () => {\n    return (\n        <nav class=\"navbar navbar-light bg-light \">\n\n            <ul class=\"nav\">\n\n                <Link class=\" logo navbar-brand\" to='/'>\n                    <img class='justify-content-start' src={logo} width=\"45\" height=\"45\" />\n                </Link>\n                <li class=\"nav-item\">\n                    <Link to='/' class=\"nav-link active\" >Home</Link>\n                </li>\n                <li class=\"nav-item\">\n                    <Link to='/about' class=\"nav-link\" >About</Link>\n                </li>\n                <li class=\"nav-item\">\n                    <Link to='/contact' class=\"nav-link\" >Contact</Link>\n                </li>\n                {/* <li class=\"nav-item\">\n                    <Link class=\"nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">Disabled</Link>\n                </li> */}\n            </ul>\n        </nav >\n    )\n}\n\nexport default Navbar","import React from 'react';\n\n\nconst Home = (e) => {\n    return (\n        <div className='container'>\n            <h4 className='center'>Home</h4>\n            <p>This is the Home page</p>\n        </div>\n    )\n}\n\nexport default Home","import React from 'react';\n\n\nconst About = () => {\n    return (\n        <div className='container'>\n            <h4 className='center'>About</h4>\n            <p>this is the about</p>\n        </div>\n    )\n}\nexport default About","import React from 'react';\n\n\nconst Contact = (props) => {\n    // setTimeout(() => {\n    //     props.history.push('/about')\n    // }, 2000);\n    return (\n        <div className='container'>\n            <h4 className='center'>Contact</h4>\n            <p>this is contact</p>\n        </div>\n    )\n}\nexport default Contact","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar'\nimport Home from './components/Home'\nimport About from './components/About'\nimport Contact from './components/Contact'\nimport { BrowserRouter, Route } from 'react-router-dom'\n\n\nfunction App() {\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Navbar />\n        <div class='jumbotron'>\n          <div class='row'>\n          </div>\n\n          <Route exact path='/' component={Home} />\n          <Route exact path='/about' component={About} />\n          <Route exact path='/contact' component={Contact} />\n        </div>\n\n      </div>\n    </BrowserRouter>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}